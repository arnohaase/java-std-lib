
Ablauf - Pausen? Fragen, interaktiv! Kamrea an? Bildschirm freigeben!
* "euer" Workshop, euer Tempo, eure Schwerpunkte
* jederzeit akustisch zu Wort melden
"verteilten" Workspace live aufbauen und wachsen lassen? (--> auch als Material für die Teilnehmen)
* erklären: JUnit-Tests, um kleine Schnipsel unabhängig ausführen zu können

* Am Anfang Bedeutung von Übungen erklären
* nach Übungen Beispiel-Lösungen durchgehen, zu Fragen ermutigen

* Collections ganz vormittags / nachmittags?

TODO Live-workspace aufsetzen

Ablauf
------

* I/O (Arno) 1:00

  * InputStream, Reader / Writer
    * InputStream
      * != "Java Streams"
      * Byte-basiert -> Binärdaten
      * "halb" blocking
      * Basis-API:
        * int read() -> -1 für EOF, "unsigned byte"
        * (int read(byte[]) -> mit / ohne offs / len -> liest nicht immer alles, was da ist)
          * Bulk Read -> Performance-Optimierung -> BufferedInputStream, NIO / ByteBuffer
        * close() -> potentiell OS-Ressourcen -> exhaustion zeigen
      * (erweitertes API -> low-level aber seltener gebraucht)
        * long skip(long)
        * long available()
        * isMarkSupported(), mark(), reset()
      * (Convenience-API -> Logik "obendrauf")
        * transferTo(OutputStream)
        * readNBytes()
        * readAllBytes()
        * void skipNBytes(long)
    * OutputStream
      * write(byte) -> statt int bei read!
      * (write(byte[]) -> mit / ohne offs / len)
      * close()
      * flush()
    * Ausprägungen
      * Servlet
      * File
      * ByteArray
      * Buffered (--> Wrapper)
      * Sockets, Pipes, ...
      * Serialisierung -> Object*
      * SequenceInputStream
      * 3rd party: tar, gzip, uuencode, ...

      * DON'T USE:
        * StringBufferInputStream

    # Alle Vorkommen des Bytes 99 in einer Datei ermitteln
    # Datei einlesen, alle geraden Bytes in eine Datei und ungerade Bytes in eine andere Datei

    * Reader -> Zeichen-basiert
      * oft (nicht immer) auf Bytes abgebildet, dann *immer* über Encoding
        * Encodings: Zeichen auf Bytes und umgekehrt
          * manchmal scheinbar gleich, aber wichtiger Unterschied
            * iso-8859-15
            * utf-8 -> bis zu 6 bytes/Zeichen
            * utf-16 -> Basis-Typ "char"
          * beide Richtungen funktionieren nicht immer
          * hat nichts zu tun mit CR / CR+LF etc.
      * int read() --> int statt char wg. -1 für EOF
      * int read(char[]) -> mit / ohne offset / len
      * close()
      * transferToWriter() / analog zu InputStream
    * Writer
      * void write(char)
      * int write(char[]) -> mit / ohne offs / len
      * flush(), close()

    * Ausprägungen:
      * String
      * File
      * Buffered -> BufferedReader.readLine()
      * InputStream/OutputStream (Wrapper)
        * mit Encoding
        * API: leider ist Encoding "optional", "Default- / Plattform-Encoding" -> nicht darauf verlassen
      * PrintWriter (Wrapper)
        * es gibt PrintStream -> Legacy für System.out, System.err

    * AutoCloseable, try-with-resource (einer, mehrere)
    
    # Datei in einen String einlesen (zeichenweise, dann gerne auch mit Convenience)
    # Datei von ISO-8859-1 nach UTF-8 konvertieren (streaming)

* Collections (2:00)
  * Collection / List / Set (Nico) (0:45)
    * RandomAccess, contains
    * Iterator, Iterable
    * for loop
      * ConcurrentModificationException
    * while-Schleife auf Iterator
      * Iterator.remove()

    * List: sort(), binarySearch(), shuffle()

    * SortedSet
      * vs sorted List

    * TODO contract von add(), remove()
      * ersetzt add() bei Set oder nicht
    * TODO contains
      * indexOf(), lastIndexOf()
      # Liste der zu löschenden Indizes löschen -> rückwärts
      # alle Duplikate in einer Liste finden + ausgeben
    * TODO Contract von List vs. Set
      * Set ist ein leeres (Marker-)Interface
    * TODO of(), copyOf()


    # Satz zerlegen, Worte nach Länge sortieren
      * set vs. list, verschiedene Worte mit selber Länge, ...

  * Map (Arno) (0:30)
    * of, ofEntries, copyOf
    * put, get, getOrDefault()
    * containsKey, containsValue, contains
    * keySet(), values(), entrySet()
    * computeIfAbsent() -> Cache (Reentranz)
    * merge() -> Counter / Teilnehmer (Set von Strings als Value, Veranstaltung als Key)
    * computeIfPresent() -> ???
    * putIfAbsent()
    * putAll()
    * replace() / replaceAll()

    # Teilernehmerverwaltung (key=Veranstaltung)
      * Teilnehmer abfragen (nie null!)
      * Teilnehmer hinzufügen / entfernen

  * welche Implementierungen gibt es, wann welche verwenden (Arno) TODO hier Übungen? -> spontan entscheiden
    * Queue / Deque ( -> LinkedList)
    * CowList
    * EnumSet
    * BitSet
    * ConcurrentHashMap
    * IdentityHashMap
      * Collections.newSetFromMap()
    * LinkedHashMap
      * LRU-Cache

  * Lambdas (Nico) (0:00 :-) )
    * functional interface, SAM
    * Syntax-Varianten
    * bindings / closure
    * "effectively final"

    # Collection.forEach() -> alle Elemente einer Liste ausgeben (explizit, Pointer auf eigene Methode, Pointer auf System.out.println)
    # eigenes "funktionales Interface", statische Methode "applyToFirst", die dieses eigene Interface auf dsa erste Element einer Liste anwendet (?)

  * Streams (Nico) (0:45)
    * was ist das
    * vs. iterator()
    * filter(), map(), forEach(), collect() auf List

    # Stream von Zahlen, ungerade Zahlen herausfiltern, halbieren
      * Methodenpointer als Lambdas -> Testability

    * findFirst(), count(), distinct()

    # Liste von Namen, nach einem Namenspräfix suchen (Bonus: per Regex)
      * Die matchenden Namen zählen (NB: Zählen und Ergebnisstream geht nicht direkt in einem Durchlauf)
      * Duplikate entfernen

    * collect() - List, Set, Map

    # Satz mit Streams in Map collecten
      * Möglichkeiten diskutieren

    * downcast mit .map()
    * nur kleine Lambdas inline
    * flatMap()

    # Stream von Sätzen

    * unit testing
      * Stream.of(...)

    * parallel streams - nicht


==== Mittag

  * Primitives (Verdauungs-Koma -> 0:15 ohne Übung)
    - types
    - int, byte, long, char
    - long <= int <= short <= byte  (Coercion)
    - bitmask == 0x80  -> ?!
    - float, double
    --  1/8 + 1/4 == 3/8
    --  5.1 + 0.1 != 5.2

    int a = 10_000
    (hex, bin)
    (octal(!))

    Boxing
    * implizit
    * ==
    * of
    * null, NPE

    * Number, Integer, Long

    * allgemein: Companion Objects

    (Number)
    * NumberFormat
      * getInstance()
      * DecimalFormat

    (# schreibe eine Methode, die eine beliebige Zahl mit '_' als Tausendertrenner und vier Nachkommastellen formatiert)

    (Array[])
      - int <-> Integer
      - String[] vs Object[] ?!?!?

    (* Character) (0:30 mit String))
      * isLetter()
      * isDigit()
      * isWhitespace()
      * isJavaIdentifierStart() / ...Part()

      * getType()
      * getName()
      * getDirectionality()

    * Strings (0:30)
      * charAt
      * chars()
      * Escaping, \\ \u
      * Multi-Line literals
      * format
      (* concatenation)
        * +
        * StringBuilder
      (* substring())
        * kein Sharing mehr
      * startsWith(), endsWith()
      * indexOf(), lastIndexOf()
      (* intern(), new String())
      * replace(), replaceAll()
      * toLowerCase(), toUpperCase(), equalsIgnoreCase()
      * join()

    # Whitespaces in einem String zählen
    # den ersten Identifier aus einem String extrahieren

    (Enums)
     - Constructor, fields, methods
     - name, valueOf, values
     - indexOf -> DB!? Boom
     - class Enum
     - ==
     - switch vollständig

  * (Comparable / Comparator (0:15))
    TODO


  * Time API (Arno) (1:00)
    * Instant
      * now()
      * isBefore(), isAfter()
      * until() -> Duration, ChronoUnit
      * Rechnen

    # wie lange dauert ...?

    * LocalDateTime
      * isBefore(), isAfter()
      * Zugriff auf Felder
      * rechnen

    # Wochentag des Geburtstags
    # 10.000er Geburtstag

    * ZoneId
      * ZoneRegion, ZoneOffset
      * Konvertieren
      * ZonedDateTime

    # ist es zwischen 13:00 und 14:00 an einem Wochentag?

    * Testability
      * Clock

    # Beispiele oben umstellen
      * Beispiel für Instant mit Clock: Person-Struct, der den Erzeugungs-Timestamp in einem Feld speichert

    * Formatieren: DateTimeFormatter
      * statische Felder mit vordefinierten Formattern
      * Instant.toString(), LocalDateTime.toString()
      * Jackson: JavaTimeModule, SerializationFeature.WRITE_DATES_AS_TIMESTAMPS
















  * Reflection innerhalb einer Klasse (Nico) (0:20)

    * Beispiel live Exception

    # alle Methoden / Felder von HashSet ausgeben
    # Klasse "Person", Property by name setzen / lesen

  * Reflection "im Großen" (Arno) (0:20)

    * contextClassLoader()
      * *nicht* Class.forName()
    * (annotation)
    * Type vs Class


    # Typ-Hierarchie von ArrayList
    # Typ-Hierarchie der Klasse zu einem FQN

  * Optionaler Teil / Auswahl
    * Pattern / Regex
    * Random
    * UUID
    * Optional
    * Arrays
    * Chronology
    * Methoden von java.lang.Object
      # (Negativ-)Beispiele verteilen --> herumspielen
      # Quiz
      # Frage / Antwort






Block 1 (arno)

primitives
- types
- int, byte, long, char
- long <= int <= byte  (Coercion)
- bitmask == 0x80  -> ?!
- float, double
--  1/8 + 1/4 == 3/8
--  5.1 + 0.1 != 5.2

int a = 10_000
hex, bin
octal(!)

- void, -- Object? any? nothing?

Boxed
- Number, Integer, Long

Number

NumberFormat

Conversion
- explicit, implicit
- unboxing mit ?

Other:
- BigInteger, BigDecimal

Array[]
  - int <-> Integer
  - String[] vs Object[] ?!?!?

String
 - multiline
 - trim/strip
 - concat --> lesbar? Schneller?
 - String.format
 - intern()
 - encoding, utf16 - latin (internal)
 - escaping \\ \u20
 -- utf8 varlength


 Enums
 - Constructor, fields, methods
 - name, valueOf, values
 - indexOf -> DB!? Boom
 - class Enum
 - ==
 - switch vollständig


Block 1b (arno)
Basis-APIs

 - Methoden von java.lang.Object
    - equals: RST

 - Comparable, Comparator
 - exceptions, Throwable etc.
 - InputStream, OutputStream, Reader, Writer
   - Charset
   - PrintStream ?!?!?!


Block 2 (nico)
Collections/Stream

 Collection, List, Set
   - of, copyOf
   - Iterator, Iterable
   - iterator, for loop,
   -- single thread concurrent modification
   - random access
   - Collections, Arrays
      - collection vs Array  API
   - Collections - sort, shuffle, binary, search

 Stream
   - API
   - Iterator vs stream
   - LongStream
   - Concurrency - parallel stream()
   - filter, map, flatMap,
   - collect, to map, to List, ...
   - toIterator

  Map
   - computeIfAbsent
   - defaults
   - ...

  IdentityHashMap

  Sorted Map/Set
    Comparator, Comparable


Queue, Deque
 - eigentlich nur Concurrency
ArrayList, HashSet, BitSet, EnumSet, CoWList, LinkedList
Performance Mythen
 - Arrays[] <-> ArrayList
 - LinkedLIst
 - Streams sind effizienter vs Lesbarkeit (schneller?)
Premature Optimization



Block 3 (arno)
Time API
  Instant vs LocalDateTime vs ZonedDateTime
  Time Zone
    - ZoneID vs offset (Berlin+1, Berlin +2)
    - SommerZeit
  Legacy
    - java.util.Date
    - Formatter
      - nicht threadsafe bei Legacy
  API zeigen
    - before, after, compare, equal
    - Chrono Unit

  Json?
  DB? JDBC

  Clock
  Wochentag des Geburtstags
  10000er Geburtstag
  Ist es gerade zwischen Mitternacht und 1:00 morgens an einem Wochentag


Block 4 (nico)
Reflection
Use JavaP
Java Beans
- class, method, field
- accessibility
- set accessible
- newInstance, constructor, aufrufe, get, set, Exceptions
   - side effect free loading
- Zugriff auf Annotations
 - retention
- Type Hierarchy
 - methods on interfaces, ...
- Nests
-- private for nest not class

(Modulsystem)
  Hidden Classes
  Records
  Nests
  ClassPathScanning

Annotation Vererbung (Java vs Frameworks)

Classloader
- ContextClassLoader
- URL ClassLoader
- Load Resources
- Hierarchy
- Single Class Loader (Spring)

- Service Loader
- enum
- records
- Dynamische Proxy

- MethodHandle, VarHandle

Generics
- Class, Method, Field, Parameter

Graal VM

Integer 1 == 2




laden von Klassen by name - nicht Class.forName() sondern Thread.currentThread().getContextClassLoader()
context class loader
resource as stream
resources as stream
service loader

  * Exceptions (0:00)
    * Throwable, Error, RuntimeException
    * functional interfaces (wrap - RuntimeException / TunnelingException / lokale Kategorisierung? -> Diskussion)
    * cause, suppressed
    * stack traces
    # Beispiel für cause, suppressed
    # Quiz, Frage / Antwort (class not found, no such method)



methods of java.lang.Object
---------------------------
* equals
  * es ist ok, es nicht zu überschreiben
    * regex Pattern
    * services
  * RST
    * R: selten überraschend
    * S
      * CaseInsensitiveString
      * Vererbung - AbstractSet, AbstractList -> List.contains
  * billig (!) - kein I/O (NW-Adresse, File.canonicalPath)
  * selektiv -> bewusst, nicht alle Attribute (generiert / Lombok / data classes / records!)
  * Aufbau: ==, instanceof, cast, Felder
* hashCode
  * consistent with equals
  * System.identityHashCode entspricht == (-> IdentityMashMap)
  * equal => gleicher hashCode, nicht anders herum (hashing ist verlustbehaftet)
  * wünschenswert:
    * gleichmäßig verteilt
    * wenig Clashes
    * stabil
    * schnell
  * Caching wenn teuer (s. String.hash)
* toString
  * menschenlesbar - generierte Implementierung ist oft nicht ideal
  * *nur* für Debug -> ggf. zusätzlicher Getter (s. UUID, StringBuilder)
  * Marker für Typ, Unterscheidung von String-Literal (z.B. PhoneNumber)
  * handgeschrieben vs. auto / generiert (beides mit Vorteilen)
* clone
  * don't :-)
    * keine klare Semantik für "kopieren"
    * kein Anwendungsfeld für generisches Kopieren
      * -> aber fachliches Kopieren per Visitor, Visitor etc.; Kotlin .copy(...) oder Immutables .with...(...)
    * Object.clone() is protected
      * ... and Cloneable macht es nicht public
    * bypasses constructor call
* Comparable
  * "die eine" Reihenfolge ("natural")
    * gibt es (fachlich) außer bei Zahlen nicht - z.B. String.compareTo vs. Collator, ignoreCase, ...
    * außer für technische / nicht menschensichtbare Reihenfolge (z.B. String)
  * Comparator ist die bessere Alternative - robuster, explizit, kontextspezifisch
  * JavaDoc: "not required to be consistent with equals" -> HashSet und TreeSet haben verschiedene Semantik


