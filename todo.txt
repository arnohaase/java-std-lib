Precondition:
- JDK -> 15 (Ab Java 8)
- IDE


Actions:
- Modulsystem und ClassLoading

Block 1

primitives
- types
- int, byte, long, char
- long <= int <= byte  (Coercion)
- bitmask == 0x80  -> ?!
- float, double
--  1/8 + 1/4 == 3/8
--  5.1 + 0.1 != 5.2

int a = 10_000
hex, bin

- void, -- Object? any? nothing?

Boxed
- Number, Integer, Long
- Number.format

Conversion
- explicit, implicit
- unboxing mit ?

Other:
- BigInteger, BigDecimal

Array[]
  - int <-> Integer

String
 - multiline
 - trim/strip
 - Builder patterns
 -- lesbar? Schneller?
 - String.format
 - encoding, utf16 - latin (internal)
 - escaping \\ \u20
 -- utf8 varlength
 - Encoding for developers
 - Charset


 Enums
 - Constructor, fields, methods
 - name, valueOf, values
 - indexOf -> DB!? Boom
 - class Enum


Block 2
Collections/Stream

 Collection, List, Set
   - of, copyOf
   - Iterator, Iterable
   - iterator, for loop,
   -- single thread concurrent modification
   - random access
   - Collections, Arrays
      - collection vs Array  API
   - Collections - sort, shuffle, binary, search

 Stream
   - API
   - Iterator vs stream
   - LongStream
   - Concurrency - parallel stream()
   - filter, map, flatMap,
   - collect, to map, to List, ...
   - toIterator

  Map
   - computeIfAbsent
   - defaults
   - ...

  Sorted Map/Set
    Comparator, Comparable


Queue, Deque
 - eigentlich nur Concurrency
ArrayList, HashSet, BitSet, EnumSet, CoWList, LinkedList
Performance Mythen
 - Arrays[] <-> ArrayList
 - LinkedLIst
 - Streams sind effizienter vs Lesbarkeit (schneller?)
Premature Optimization



Block 3
Time API
  Instant vs LocalDateTime vs ZonedDateTime
  Time Zone
    - ZoneID vs offset (Berlin+1, Berlin +2)
    - SommerZeit
  Legacy
    - java.util.Date
    - Formatter
      - nicht threadsafe bei Legacy
  API zeigen
    - before, after, compare, equal
    - Chrono Unit

  Json?
  DB? JDBC



Block 4
Reflection
Use JavaP
Java Beans
- class, method, field
- accessibility
- set accessible
- newInstance, constructor, aufrufe, get, set, Exceptions
   - side effect free loading
- Zugriff auf Annotations
 - retention
- Type Hierarchy
 - methods on interfaces, ...
- Nests
-- private for nest not class

(Modulsystem)
  Hidden Classes
  Records
  ClassPathScanning

Annotation Vererbung (Java vs Frameworks)

Classloader
- ContextClassLoader
- URL ClassLoader
- Load Resources
- Hierarchy
- Single Class Loader (Spring)

- Service Loader
- enum
- records
- Dynamische Proxy

- MethodHandle, VarHandle

Generics
- Class, Method, Field, Parameter

Graal VM

Integer 1 == 2


==========
Attic
 - Random, SecureRandom, ThreadLocalRandom
   - API
 - UUID, types
