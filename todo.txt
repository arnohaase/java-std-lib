
Java 15!!
junit 5

Ablauf - Pausen? Fragen, interaktiv! Kamrea an? Bildschirm freigeben!

Ablauf
------

* Basis-APIs (Arno)
  * java.lang.Object
  * Comparable / Comparator
    # (Negativ-)Beispiele verteilen --> herumspielen
    # Quiz
    # Frage / Antwort

  * InputStream, Reader / Writer
    * AutoCloseable, try-with-resource (einer, mehrere)
    * int, -1 für eof (sowohl bei byte als auch bei char)
    * encodings
    # Datei in einen String einlesen
    # Datei von ISO-8859-1 nach UTF-8 konvertieren (streaming)

  * Exceptions
    * Throwable, Error, RuntimeException
    * functional interfaces (wrap - RuntimeException / TunnelingException / lokale Kategorisierung? -> Diskussion)
    * cause, suppressed
    * stack traces
    # Beispiel für cause, suppressed
    # Quiz, Frage / Antwort (class not found, no such method)

* Collections
  * Collection / List / Set (Nico)
    * RandomAccess, contains
    * Iterator, Iterable
    * for loop
      * ConcurrentModificationException
    * while-Schleife auf Iterator
      * Iterator.remove()

    * List: sort(), binarySearch(), shuffle()

    * SortedSet
      * vs sorted List

    # Satz zerlegen, Worte nach Länge sortieren
      * set vs. list, verschiedene Worte mit selber Länge, ...

  * welche Implementierungen gibt es, wann welche verwenden (Arno) TODO hier Übungen? -> spontan entscheiden
    * Queue / Deque ( -> LinkedList)
    * CowList
    * EnumSet
    * BitSet
    * ConcurrentHashMap

  * Map (Arno)
    * computeIfAbsent() (Reentranz)
    * ...

    * IdentityHashMap

    # TODO - cache bauen? (ohne retention policy)

  * Lambdas (Nico)
    * functional interface, SAM
    * Syntax-Varianten
    * bindings / closure
    * "effectively final"

    # Collection.forEach() -> alle Elemente einer Liste ausgeben (explizit, Pointer auf eigene Methode, Pointer auf System.out.println)

  * Streams (Nico)
    * was ist das
    * vs. iterator()
    * filter(), map(), forEach(), collect() auf List

    # Stream von Zahlen, ungerade Zahlen herausfiltern, halbieren
      * Methodenpointer als Lambdas -> Testability

    * findFirst(), count(), distinct()

    # Liste von Namen, nach einem Namenspräfix suchen (Bonus: per Regex)
      * Die matchenden Namen zählen (NB: Zählen und Ergebnisstream geht nicht direkt in einem Durchlauf)
      * Duplikate entfernen

    * collect() - List, Set, Map

    # Satz mit Streams in Map collecten
      * Möglichkeiten diskutieren

    * flatMap()

    # Stream von Sätzen

    * unit testing
      * Stream.of(...)

    * parallel streams - nicht


==== Mittag

  * Primitives

    TODO

    * Strings
      * Multi-Line literals

    TODO


  * Time API (Arno)
    * Instant
      * now()
      * before(), after()
      * until() -> Duration, ChronoUnit

    # wie lange dauert ...?

    * LocalDateTime

    # Wochentag des Geburtstags
      * 10.000er Geburtstag

    * ZoneId
      * ZoneRegion, ZoneOffset
      * ZonedDateTime

    # ist es zwischen 13:00 und 14:00 an einem Wochentag?

    * Testability
      * Clock

    # Beispiele oben umstellen
      * Beispiel für Instant mit Clock: Person-Struct, der den Erzeugungs-Timestamp in einem Feld speichert

    * Formatieren

  * Reflection innerhalb einer Klasse (Nico)

  TODO

  * Reflection "im Großen" (Arno)

  TODO


  * Optional / Auswahl
    * Random
    * UUID
    * Arrays






Block 1 (arno)

primitives
- types
- int, byte, long, char
- long <= int <= byte  (Coercion)
- bitmask == 0x80  -> ?!
- float, double
--  1/8 + 1/4 == 3/8
--  5.1 + 0.1 != 5.2

int a = 10_000
hex, bin
octal(!)

- void, -- Object? any? nothing?

Boxed
- Number, Integer, Long

Number

NumberFormat

Conversion
- explicit, implicit
- unboxing mit ?

Other:
- BigInteger, BigDecimal

Array[]
  - int <-> Integer
  - String[] vs Object[] ?!?!?

String
 - multiline
 - trim/strip
 - concat --> lesbar? Schneller?
 - String.format
 - intern()
 - encoding, utf16 - latin (internal)
 - escaping \\ \u20
 -- utf8 varlength


 Enums
 - Constructor, fields, methods
 - name, valueOf, values
 - indexOf -> DB!? Boom
 - class Enum
 - ==
 - switch vollständig


Block 1b (arno)
Basis-APIs

 - Methoden von java.lang.Object
    - equals: RST

 - Comparable, Comparator
 - exceptions, Throwable etc.
 - InputStream, OutputStream, Reader, Writer
   - Charset
   - PrintStream ?!?!?!


Block 2 (nico)
Collections/Stream

 Collection, List, Set
   - of, copyOf
   - Iterator, Iterable
   - iterator, for loop,
   -- single thread concurrent modification
   - random access
   - Collections, Arrays
      - collection vs Array  API
   - Collections - sort, shuffle, binary, search

 Stream
   - API
   - Iterator vs stream
   - LongStream
   - Concurrency - parallel stream()
   - filter, map, flatMap,
   - collect, to map, to List, ...
   - toIterator

  Map
   - computeIfAbsent
   - defaults
   - ...

  IdentityHashMap

  Sorted Map/Set
    Comparator, Comparable


Queue, Deque
 - eigentlich nur Concurrency
ArrayList, HashSet, BitSet, EnumSet, CoWList, LinkedList
Performance Mythen
 - Arrays[] <-> ArrayList
 - LinkedLIst
 - Streams sind effizienter vs Lesbarkeit (schneller?)
Premature Optimization



Block 3 (arno)
Time API
  Instant vs LocalDateTime vs ZonedDateTime
  Time Zone
    - ZoneID vs offset (Berlin+1, Berlin +2)
    - SommerZeit
  Legacy
    - java.util.Date
    - Formatter
      - nicht threadsafe bei Legacy
  API zeigen
    - before, after, compare, equal
    - Chrono Unit

  Json?
  DB? JDBC

  Clock
  Wochentag des Geburtstags
  10000er Geburtstag
  Ist es gerade zwischen Mitternacht und 1:00 morgens an einem Wochentag


Block 4 (nico)
Reflection
Use JavaP
Java Beans
- class, method, field
- accessibility
- set accessible
- newInstance, constructor, aufrufe, get, set, Exceptions
   - side effect free loading
- Zugriff auf Annotations
 - retention
- Type Hierarchy
 - methods on interfaces, ...
- Nests
-- private for nest not class

(Modulsystem)
  Hidden Classes
  Records
  Nests
  ClassPathScanning

Annotation Vererbung (Java vs Frameworks)

Classloader
- ContextClassLoader
- URL ClassLoader
- Load Resources
- Hierarchy
- Single Class Loader (Spring)

- Service Loader
- enum
- records
- Dynamische Proxy

- MethodHandle, VarHandle

Generics
- Class, Method, Field, Parameter

Graal VM

Integer 1 == 2




laden von Klassen by name - nicht Class.forName() sondern Thread.currentThread().getContextClassLoader()
context class loader
resource as stream
resources as stream
service loader
